#!/usr/bin/env python3
"""
Computer B (Client) - Enhanced Dual Eye Tracking Experiment
This computer acts as the client and connects to Computer A
ENHANCED VERSION - Compatible with Enhanced Computer A
"""

from __future__ import division
from __future__ import print_function

import pylink
import os
import platform
import random
import time
import sys
import socket
import threading
import json
from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy
from psychopy import visual, core, event, monitors, gui
from PIL import Image
from string import ascii_letters, digits

# Global variables for networking and enhanced gaze display
client_socket = None
gaze_marker = None
el_tracker = None
win = None
other_gaze_x = 0
other_gaze_y = 0
gaze_data_lock = threading.Lock()
last_gaze_update = 0

# Enhanced gaze display functions (same as Computer A but adapted for Computer B)
def receive_and_process_gaze_data():
    """
    Enhanced function to receive JSON gaze data from Computer A,
    convert it to usable coordinates, and update display marker
    """
    global client_socket, gaze_marker, win, other_gaze_x, other_gaze_y, gaze_data_lock, last_gaze_update
    
    if client_socket is None:
        print("No connection to Computer A, skipping gaze data receiving")
        return
        
    data_buffer = ""
    print("Starting to receive gaze data from Computer A...")
    
    while True:
        try:
            # Receive data from Computer A
            data = client_socket.recv(1024).decode('utf-8')
            if not data:
                print("Computer A disconnected")
                break
                
            # Add received data to buffer
            data_buffer += data
            
            # Process complete JSON messages (separated by newlines)
            if '\n' in data_buffer:
                lines = data_buffer.split('\n')
                
                # Process all complete lines except the last (incomplete) one
                for i in range(len(lines) - 1):
                    try:
                        # Parse JSON data from Computer A
                        gaze_json = json.loads(lines[i])
                        
                        # Extract gaze coordinates
                        if 'gaze_x' in gaze_json and 'gaze_y' in gaze_json:
                            raw_x = gaze_json['gaze_x']
                            raw_y = gaze_json['gaze_y']
                            
                            # Convert to PsychoPy coordinate system
                            converted_coords = convert_gaze_coordinates(raw_x, raw_y)
                            
                            # Thread-safe update of gaze position
                            with gaze_data_lock:
                                other_gaze_x = converted_coords[0]
                                other_gaze_y = converted_coords[1]
                                last_gaze_update = core.getTime()
                            
                            # Update gaze marker position
                            if gaze_marker and win:
                                update_gaze_marker(converted_coords[0], converted_coords[1])
                                
                    except json.JSONDecodeError as e:
                        print(f"JSON decode error: {e}")
                        continue
                    except KeyError as e:
                        print(f"Missing gaze coordinate in data: {e}")
                        continue
                
                # Keep the last incomplete line in buffer
                data_buffer = lines[-1]
                
        except Exception as e:
            print(f"Receive gaze data error: {e}")
            break

def convert_gaze_coordinates(raw_x, raw_y):
    """Convert raw gaze coordinates from Computer A to PsychoPy coordinate system"""
    global win
    
    if win is None:
        return (0, 0)
    
    screen_width = win.size[0]
    screen_height = win.size[1]
    
    # Convert from EyeLink coordinates to PsychoPy coordinates
    converted_x = raw_x - (screen_width / 2)
    converted_y = (screen_height / 2) - raw_y
    
    return (converted_x, converted_y)

def update_gaze_marker(x, y):
    """Update the visual marker showing Computer A's gaze position"""
    global gaze_marker
    
    if gaze_marker:
        gaze_marker.setPos([x, y])
        
        # Visual feedback for data freshness
        current_time = core.getTime()
        with gaze_data_lock:
            time_since_update = current_time - last_gaze_update
        
        # Change marker appearance based on data freshness
        if time_since_update < 0.1:  # Fresh data
            gaze_marker.setFillColor('blue')  # Computer B uses blue
            gaze_marker.setOpacity(1.0)
        elif time_since_update < 0.5:  # Slightly old data
            gaze_marker.setFillColor('cyan')
            gaze_marker.setOpacity(0.8)
        else:  # Old data
            gaze_marker.setFillColor('gray')
            gaze_marker.setOpacity(0.5)

def create_enhanced_gaze_marker(win):
    """Create an enhanced gaze marker for Computer B (blue colored)"""
    gaze_circle = visual.Circle(
        win=win, 
        radius=15, 
        fillColor='blue',  # Blue for Computer B
        lineColor='white',
        lineWidth=2, 
        pos=[0, 0],
        opacity=0.8
    )
    return gaze_circle

def get_current_other_gaze():
    """Get the current gaze position of Computer A (thread-safe)"""
    global other_gaze_x, other_gaze_y, last_gaze_update, gaze_data_lock
    
    with gaze_data_lock:
        return (other_gaze_x, other_gaze_y, last_gaze_update)

def draw_gaze_overlay():
    """Draw Computer A's gaze marker on the current display"""
    global gaze_marker, win
    
    if gaze_marker and win and client_socket:
        current_time = core.getTime()
        gaze_x, gaze_y, last_update = get_current_other_gaze()
        
        # Only draw if we have recent data
        if current_time - last_update < 1.0:
            gaze_marker.draw()

def start_enhanced_gaze_thread():
    """Start the enhanced gaze data receiving thread"""
    global client_socket
    
    if client_socket:
        print("Starting enhanced gaze data thread...")
        receive_thread = threading.Thread(target=receive_and_process_gaze_data)
        receive_thread.daemon = True
        receive_thread.start()
        return receive_thread
    else:
        print("No client connection - gaze thread not started")
        return None

# FIXED: Get Computer A's IP address with correct default for ethernet
dlg = gui.Dlg(title='Computer B - Network Setup')
dlg.addText('Enter Computer A\'s IP address:')
dlg.addField('Computer A IP:', '100.1.1.10')  # CHANGED: Correct ethernet IP default
dlg.addText('(Check Computer A\'s console for the correct IP)')
dlg.addText('(Should be 100.1.1.10 for ethernet connection)')  # ADDED: Helpful hint
dlg_data = dlg.show()

if dlg.OK:
    server_ip = dlg_data[0]
    print(f"Attempting to connect to Computer A at {server_ip}:5555")
else:
    print("User cancelled")
    core.quit()
    sys.exit()

# Connect to Computer A (Server) with enhanced error messages
client_socket = None
max_retries = 5  # INCREASED: More retry attempts

for attempt in range(max_retries):
    try:
        print(f"Connection attempt {attempt + 1}/{max_retries}")
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.settimeout(15.0)  # INCREASED: Longer timeout
        client_socket.connect((server_ip, 5555))
        client_socket.settimeout(None)
        print(f"Successfully connected to Computer A at {server_ip}")
        break
    except socket.timeout:
        print(f"Connection attempt {attempt + 1} timed out")
        if client_socket:
            client_socket.close()
        client_socket = None
    except ConnectionRefusedError:
        print(f"Connection attempt {attempt + 1} refused - Computer A may not be ready")
        if client_socket:
            client_socket.close()
        client_socket = None
    except socket.gaierror:
        print(f"Connection attempt {attempt + 1} failed - Invalid IP address: {server_ip}")
        if client_socket:
            client_socket.close()
        client_socket = None
        break  # Don't retry for invalid IP
    except Exception as e:
        print(f"Connection attempt {attempt + 1} failed: {e}")
        if client_socket:
            client_socket.close()
        client_socket = None
    
    if attempt < max_retries - 1:
        print("Retrying in 3 seconds...")
        time.sleep(3)  # INCREASED: Longer wait between retries

if client_socket is None:
    print("Failed to connect to Computer A after all attempts")
    print("Possible solutions:")
    print("1. Check that Computer A is running and shows 'Server listening...'")
    print("2. Verify Computer A's IP address (should be 100.1.1.10)")
    print("3. Check ethernet cable connection")
    print("4. Make sure both computers are on the same ethernet network")
    print("Continuing without network connection")

# Function to continuously send gaze data to Computer A
def send_gaze_data():
    global client_socket, el_tracker
    if client_socket is None:
        print("No connection to Computer A, skipping gaze data sending")
        return
        
    while True:
        try:
            if el_tracker and el_tracker.isRecording():
                sample = el_tracker.getNewestSample()
                if sample is not None:
                    if sample.isRightSample():
                        gaze_data = sample.getRightEye().getGaze()
                    elif sample.isLeftSample():
                        gaze_data = sample.getLeftEye().getGaze()
                    else:
                        gaze_data = None
                        
                    if gaze_data and gaze_data[0] != pylink.MISSING_DATA and gaze_data[1] != pylink.MISSING_DATA:
                        data_to_send = json.dumps({"gaze_x": gaze_data[0], "gaze_y": gaze_data[1]})
                        client_socket.sendall((data_to_send + '\n').encode())
                        
            core.wait(0.016)  # ~60Hz update rate
        except Exception as e:
            print(f"Send gaze data error: {e}")
            break

# Switch to the script folder
script_path = os.path.dirname(sys.argv[0])
if len(script_path) != 0:
    os.chdir(script_path)

# Show only critical log message in the PsychoPy console
from psychopy import logging
logging.console.setLevel(logging.CRITICAL)

# Configuration variables
use_retina = False
dummy_mode = False
full_screen = True

# Set up EDF data file name
edf_fname = 'COMP_B'

# Prompt user to specify an EDF data filename
dlg_title = 'Computer B - Enter EDF File Name'
dlg_prompt = 'Please enter a file name with 8 or fewer characters\n[letters, numbers, and underscore].'

while True:
    dlg = gui.Dlg(dlg_title)
    dlg.addText(dlg_prompt)
    dlg.addField('File Name:', edf_fname)
    ok_data = dlg.show()
    if dlg.OK:
        print('EDF data filename: {}'.format(ok_data[0]))
    else:
        print('user cancelled')
        if client_socket:
            client_socket.close()
        core.quit()
        sys.exit()

    tmp_str = dlg.data[0]
    edf_fname = tmp_str.rstrip().split('.')[0]

    allowed_char = ascii_letters + digits + '_'
    if not all([c in allowed_char for c in edf_fname]):
        print('ERROR: Invalid EDF filename')
    elif len(edf_fname) > 8:
        print('ERROR: EDF filename should not exceed 8 characters')
    else:
        break

# Set up folders
results_folder = 'results'
if not os.path.exists(results_folder):
    os.makedirs(results_folder)

time_str = time.strftime("_%Y_%m_%d_%H_%M", time.localtime())
session_identifier = edf_fname + time_str
session_folder = os.path.join(results_folder, session_identifier)
if not os.path.exists(session_folder):
    os.makedirs(session_folder)

# Connect to EyeLink
if dummy_mode:
    el_tracker = pylink.EyeLink(None)
else:
    try:
        el_tracker = pylink.EyeLink("100.1.1.1")
    except RuntimeError as error:
        print('ERROR:', error)
        if client_socket:
            client_socket.close()
        core.quit()
        sys.exit()

# Open EDF file
edf_file = edf_fname + ".EDF"
try:
    el_tracker.openDataFile(edf_file)
except RuntimeError as err:
    print('ERROR:', err)
    if el_tracker.isConnected():
        el_tracker.close()
    if client_socket:
        client_socket.close()
    core.quit()
    sys.exit()

# Configure tracker
el_tracker.setOfflineMode()

# Get tracker version
eyelink_ver = 0
if not dummy_mode:
    vstr = el_tracker.getTrackerVersionString()
    eyelink_ver = int(vstr.split()[-1].split('.')[0])
    print('Running experiment on %s, version %d' % (vstr, eyelink_ver))

# Set up tracking parameters
file_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'
link_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,FIXUPDATE,INPUT'

if eyelink_ver > 3:
    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,HTARGET,GAZERES,BUTTON,STATUS,INPUT'
    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT'
else:
    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,GAZERES,BUTTON,STATUS,INPUT'
    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT'

el_tracker.sendCommand("file_event_filter = %s" % file_event_flags)
el_tracker.sendCommand("file_sample_data = %s" % file_sample_flags)
el_tracker.sendCommand("link_event_filter = %s" % link_event_flags)
el_tracker.sendCommand("link_sample_data = %s" % link_sample_flags)
el_tracker.sendCommand("calibration_type = HV9")

# Set up graphics
mon = monitors.Monitor('myMonitor', width=53.0, distance=70.0)
win = visual.Window(fullscr=full_screen, monitor=mon, winType='pyglet', units='pix')

scn_width, scn_height = win.size
if 'Darwin' in platform.system() and use_retina:
    scn_width = int(scn_width/2.0)
    scn_height = int(scn_height/2.0)

# Configure EyeLink graphics
el_coords = "screen_pixel_coords = 0 0 %d %d" % (scn_width - 1, scn_height - 1)
el_tracker.sendCommand(el_coords)

genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)
foreground_color = (-1, -1, -1)
background_color = win.color
genv.setCalibrationColors(foreground_color, background_color)

# Set up calibration target
if os.path.exists('images/fixTarget.bmp'):
    genv.setTargetType('picture')
    genv.setPictureTarget(os.path.join('images', 'fixTarget.bmp'))

genv.setCalibrationSounds('', '', '')

if use_retina:
    genv.fixMacRetinaDisplay()

pylink.openGraphicsEx(genv)

# Create enhanced gaze marker for showing Computer A's gaze
gaze_marker = create_enhanced_gaze_marker(win)

# Start networking threads
if client_socket:
    send_thread = threading.Thread(target=send_gaze_data)
    send_thread.daemon = True
    send_thread.start()
    
    receive_thread = start_enhanced_gaze_thread()

# Helper functions
def clear_screen(win):
    win.fillColor = genv.getBackgroundColor()
    win.flip()

def show_msg(win, text, wait_for_keypress=True):
    msg = visual.TextStim(win, text, color=genv.getForegroundColor(), wrapWidth=scn_width/2)
    clear_screen(win)
    msg.draw()
    win.flip()
    if wait_for_keypress:
        event.waitKeys()
        clear_screen(win)

def terminate_task():
    global el_tracker, client_socket
    
    if el_tracker and el_tracker.isConnected():
        if el_tracker.isRecording():
            el_tracker.stopRecording()
        el_tracker.setOfflineMode()
        el_tracker.sendCommand('clear_screen 0')
        pylink.msecDelay(500)
        el_tracker.closeDataFile()
        
        # Download EDF file
        local_edf = os.path.join(session_folder, session_identifier + '.EDF')
        try:
            el_tracker.receiveDataFile(edf_file, local_edf)
        except RuntimeError as error:
            print('ERROR:', error)
        
        el_tracker.close()
    
    # Close network connection
    if client_socket:
        client_socket.close()
    
    win.close()
    core.quit()
    sys.exit()

# Show instructions
task_msg = 'Computer B (Client)\n\n'
if client_socket:
    task_msg += f'Connected to Computer A at {server_ip}!\n\n'
else:
    task_msg += 'No connection to Computer A\n\n'

task_msg += 'Press Ctrl-C to quit the task early\n'
if dummy_mode:
    task_msg += '\nPress ENTER to start the task'
else:
    task_msg += '\nPress ENTER twice to calibrate tracker'

show_msg(win, task_msg)

# Calibration
if not dummy_mode:
    try:
        el_tracker.doTrackerSetup()
    except RuntimeError as err:
        print('ERROR:', err)
        el_tracker.exitCalibration()

# Enhanced main experiment
def run_enhanced_experiment():
    """Enhanced experiment with better gaze display"""
    global el_tracker, win, gaze_marker, client_socket
    
    try:
        # Define stimuli paths
        if not os.path.exists("PSY stimuli"):
            os.makedirs("PSY stimuli")
        
        images = []
        image_names = ["car.png", "hand.png", "face.png", "house.png"]
        for name in image_names:
            if os.path.exists(f"PSY stimuli/{name}"):
                images.append(f"PSY stimuli/{name}")
            else:
                images.append(None)
        
        # Grid positions and settings
        grid_positions = [(-200, 200), (200, 200), (-200, -200), (200, -200)]
        image_size = (150, 150)
        
        # Start recording
        el_tracker.startRecording(1, 1, 1, 1)
        
        # Main trial loop
        num_trials = 4
        for trial in range(num_trials):
            print(f"Starting trial {trial + 1}")
            
            el_tracker.sendMessage(f'TRIALID {trial}')
            
            # Show fixation
            fixation = visual.TextStim(win, text="+", color=(-1, -1, -1), height=50)
            fixation.draw()
            
            # Draw Computer A's gaze marker with enhanced display
            draw_gaze_overlay()
            
            win.flip()
            core.wait(1.0)
            
            # Show stimuli
            shuffled_positions = random.sample(grid_positions, len(grid_positions))
            
            for i, pos in enumerate(shuffled_positions):
                if images[i] and os.path.exists(images[i]):
                    stim = visual.ImageStim(win, image=images[i], pos=pos, size=image_size)
                else:
                    text_labels = ["CAR", "HAND", "FACE", "HOUSE"]
                    stim = visual.TextStim(win, text=text_labels[i], pos=pos, color=(-1, -1, -1), height=30)
                stim.draw()
            
            # Draw Computer A's gaze marker with enhanced display
            draw_gaze_overlay()
            
            win.flip()
            el_tracker.sendMessage('stimuli_onset')
            
            # During stimulus presentation, continuously update gaze display
            start_time = core.getTime()
            while core.getTime() - start_time < 3.0:
                # Redraw stimuli
                for i, pos in enumerate(shuffled_positions):
                    if images[i] and os.path.exists(images[i]):
                        stim = visual.ImageStim(win, image=images[i], pos=pos, size=image_size)
                    else:
                        text_labels = ["CAR", "HAND", "FACE", "HOUSE"]
                        stim = visual.TextStim(win, text=text_labels[i], pos=pos, color=(-1, -1, -1), height=30)
                    stim.draw()
                
                # Draw updated gaze marker
                draw_gaze_overlay()
                
                win.flip()
                core.wait(0.016)  # ~60Hz refresh rate
                
                # Check for quit
                keys = event.getKeys()
                if 'escape' in keys:
                    return
            
            # Clear screen
            clear_screen(win)
            el_tracker.sendMessage('stimuli_offset')
            core.wait(1.0)
            
            # Check for quit
            keys = event.getKeys()
            if 'escape' in keys:
                break
        
        # Stop recording
        el_tracker.stopRecording()
        
    except Exception as e:
        print(f"Experiment error: {e}")

# Run the enhanced experiment
try:
    run_enhanced_experiment()
except Exception as e:
    print(f"Experiment error: {e}")
finally:
    terminate_task()
