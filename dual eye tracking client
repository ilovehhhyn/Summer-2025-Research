# Modified version of your original EyeLink script with dual eye-tracking capability
# Added network communication to share gaze data between two participants
# TROUBLESHOOTED VERSION

from __future__ import division
from __future__ import print_function

import pylink
import os
import platform
import random
import time
import sys
import socket
import json
import threading
from queue import Queue, Empty
from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy
from psychopy import visual, core, event, monitors, gui
from PIL import Image  # for preparing the Host backdrop image
from string import ascii_letters, digits

# === NETWORK COMMUNICATION CLASS ===
class GazeNetworking:
    def __init__(self, server_ip, server_port=12345):
        self.server_ip = server_ip
        self.server_port = server_port
        self.socket = None
        self.other_gaze = {'x': 0, 'y': 0, 'valid': False}
        self.connected = False
        self.receive_thread = None
        
    def connect_to_server(self):
        """Connect to the gaze sharing server"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(5.0)  # Add timeout for connection
            self.socket.connect((self.server_ip, self.server_port))
            self.connected = True
            print(f"Connected to gaze server at {self.server_ip}:{self.server_port}")
            
            # Start thread to receive other participant's gaze data
            self.receive_thread = threading.Thread(target=self.receive_gaze_data)
            self.receive_thread.daemon = True
            self.receive_thread.start()
            
            return True
        except Exception as e:
            print(f"Failed to connect to server: {e}")
            self.connected = False
            return False
            
    def receive_gaze_data(self):
        """Receive gaze data from the other participant"""
        buffer = b''
        while self.connected:
            try:
                if not self.socket:
                    break
                    
                self.socket.settimeout(0.1)  # Short timeout for non-blocking
                data = self.socket.recv(1024)
                if not data:
                    break
                    
                buffer += data
                while b'\n' in buffer:
                    line, buffer = buffer.split(b'\n', 1)
                    if line:
                        try:
                            gaze_data = json.loads(line.decode())
                            # Validate gaze data structure
                            if all(key in gaze_data for key in ['x', 'y', 'valid']):
                                self.other_gaze = gaze_data
                        except (json.JSONDecodeError, ValueError):
                            pass
                            
            except socket.timeout:
                continue  # Expected timeout, continue loop
            except Exception as e:
                print(f"Error receiving gaze data: {e}")
                break
                
    def send_gaze_data(self, x, y, valid):
        """Send current participant's gaze data to server"""
        if self.socket and self.connected:
            try:
                gaze_data = {'x': float(x), 'y': float(y), 'valid': bool(valid), 'timestamp': time.time()}
                data = json.dumps(gaze_data).encode() + b'\n'  # Add newline delimiter
                self.socket.send(data)
            except Exception as e:
                print(f"Error sending gaze data: {e}")
                self.connected = False
                
    def disconnect(self):
        """Close network connection"""
        self.connected = False
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
        if self.receive_thread and self.receive_thread.is_alive():
            self.receive_thread.join(timeout=1.0)

# === YOUR ORIGINAL SCRIPT STARTS HERE (with modifications) ===

# Switch to the script folder
script_path = os.path.dirname(sys.argv[0])
if len(script_path) != 0:
    os.chdir(script_path)

# Show only critical log message in the PsychoPy console
from psychopy import logging
logging.console.setLevel(logging.CRITICAL)

# Set this variable to True if you use the built-in retina screen as your
# primary display device on macOS. If have an external monitor, set this
# variable True if you choose to "Optimize for Built-in Retina Display"
# in the Displays preference settings.
use_retina = False

# Set this variable to True to run the script in "Dummy Mode"
dummy_mode = False

# Set this variable to True to run the task in full screen mode
# It is easier to debug the script in non-fullscreen mode
full_screen = True

# === DUAL EYE TRACKING SETUP ===
# Get network configuration for dual eye tracking
network_dlg = gui.Dlg(title="Dual Eye Tracking Network Setup")
network_dlg.addField('Enable Dual Eye Tracking:', True)
network_dlg.addField('Server IP Address:', '192.168.1.100')
network_dlg.addField('Participant ID:', 'A')
network_setup = network_dlg.show()

if not network_dlg.OK:
    print('User cancelled network setup')
    core.quit()
    sys.exit()

enable_dual_tracking = network_setup[0]
server_ip = network_setup[1]
participant_id = network_setup[2]

# Initialize network connection if dual tracking is enabled
gaze_network = None
if enable_dual_tracking:
    gaze_network = GazeNetworking(server_ip)
    if not gaze_network.connect_to_server():
        print("Warning: Could not connect to gaze server. Continuing without dual tracking.")
        gaze_network = None

# Store the parameters of all trials in a list, [condition, image]
trials = [
    ['cond_1', 'img_1.jpg'],
    ['cond_2', 'img_2.jpg'],
    ]

# Set up EDF data file name and local data folder
#
# The EDF data filename should not exceed 8 alphanumeric characters
# use ONLY number 0-9, letters, & _ (underscore) in the filename
edf_fname = f'DUAL_{participant_id}'

# Prompt user to specify an EDF data filename
# before we open a fullscreen window
dlg_title = 'Enter EDF File Name'
dlg_prompt = f'Participant {participant_id}\nPlease enter a file name with 8 or fewer characters\n' + \
             '[letters, numbers, and underscore].'

# loop until we get a valid filename
while True:
    dlg = gui.Dlg(dlg_title)
    dlg.addText(dlg_prompt)
    dlg.addField('File Name:', edf_fname)
    # show dialog and wait for OK or Cancel
    ok_data = dlg.show()
    if dlg.OK:  # if ok_data is not None
        print('EDF data filename: {}'.format(ok_data[0]))
    else:
        print('user cancelled')
        if gaze_network:
            gaze_network.disconnect()
        core.quit()
        sys.exit()

    # get the string entered by the experimenter
    tmp_str = dlg.data[0]
    # strip trailing characters, ignore the ".edf" extension
    edf_fname = tmp_str.rstrip().split('.')[0]

    # check if the filename is valid (length <= 8 & no special char)
    allowed_char = ascii_letters + digits + '_'
    if not all([c in allowed_char for c in edf_fname]):
        print('ERROR: Invalid EDF filename')
    elif len(edf_fname) > 8:
        print('ERROR: EDF filename should not exceed 8 characters')
    else:
        break

# Set up a folder to store the EDF data files and the associated resources
# e.g., files defining the interest areas used in each trial
results_folder = 'results'
if not os.path.exists(results_folder):
    os.makedirs(results_folder)

# We download EDF data file from the EyeLink Host PC to the local hard
# drive at the end of each testing session, here we rename the EDF to
# include session start date/time
time_str = time.strftime("_%Y_%m_%d_%H_%M", time.localtime())
session_identifier = edf_fname + time_str

# create a folder for the current testing session in the "results" folder
session_folder = os.path.join(results_folder, session_identifier)
if not os.path.exists(session_folder):
    os.makedirs(session_folder)

# Step 1: Connect to the EyeLink Host PC
#
# The Host IP address, by default, is "100.1.1.1".
# the "el_tracker" objected created here can be accessed through the Pylink
# Set the Host PC address to "None" (without quotes) to run the script
# in "Dummy Mode"
if dummy_mode:
    el_tracker = pylink.EyeLink(None)
else:
    try:
        el_tracker = pylink.EyeLink("100.1.1.1")
    except RuntimeError as error:
        print('ERROR:', error)
        if gaze_network:
            gaze_network.disconnect()
        core.quit()
        sys.exit()

# Step 2: Open an EDF data file on the Host PC
edf_file = edf_fname + ".EDF"
try:
    el_tracker.openDataFile(edf_file)
except RuntimeError as err:
    print('ERROR:', err)
    # close the link if we have one open
    if el_tracker.isConnected():
        el_tracker.close()
    if gaze_network:
        gaze_network.disconnect()
    core.quit()
    sys.exit()

# Add a header text to the EDF file to identify the current experiment name
# This is OPTIONAL. If your text starts with "RECORDED BY " it will be
# available in DataViewer's Inspector window by clicking
# the EDF session node in the top panel and looking for the "Recorded By:"
# field in the bottom panel of the Inspector.
preamble_text = f'RECORDED BY {os.path.basename(__file__)} - Participant {participant_id}'
if enable_dual_tracking:
    preamble_text += ' - DUAL EYE TRACKING MODE'
el_tracker.sendCommand("add_file_preamble_text '%s'" % preamble_text)

# Step 3: Configure the tracker
#
# Put the tracker in offline mode before we change tracking parameters
el_tracker.setOfflineMode()

# Get the software version:  1-EyeLink I, 2-EyeLink II, 3/4-EyeLink 1000,
# 5-EyeLink 1000 Plus, 6-Portable DUO
eyelink_ver = 0  # set version to 0, in case running in Dummy mode
if not dummy_mode:
    vstr = el_tracker.getTrackerVersionString()
    eyelink_ver = int(vstr.split()[-1].split('.')[0])
    # print out some version info in the shell
    print('Running experiment on %s, version %d' % (vstr, eyelink_ver))

# File and Link data control
# what eye events to save in the EDF file, include everything by default
file_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'
# what eye events to make available over the link, include everything by default
link_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,FIXUPDATE,INPUT'
# what sample data to save in the EDF data file and to make available
# over the link, include the 'HTARGET' flag to save head target sticker
# data for supported eye trackers
if eyelink_ver > 3:
    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,HTARGET,GAZERES,BUTTON,STATUS,INPUT'
    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT'
else:
    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,GAZERES,BUTTON,STATUS,INPUT'
    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT'
el_tracker.sendCommand("file_event_filter = %s" % file_event_flags)
el_tracker.sendCommand("file_sample_data = %s" % file_sample_flags)
el_tracker.sendCommand("link_event_filter = %s" % link_event_flags)
el_tracker.sendCommand("link_sample_data = %s" % link_sample_flags)

# Optional tracking parameters
# Sample rate, 250, 500, 1000, or 2000, check your tracker specification
# if eyelink_ver > 2:
#     el_tracker.sendCommand("sample_rate 1000")
# Choose a calibration type, H3, HV3, HV5, HV13 (HV = horizontal/vertical),
el_tracker.sendCommand("calibration_type = HV9")
# Set a gamepad button to accept calibration/drift check target
# You need a supported gamepad/button box that is connected to the Host PC
el_tracker.sendCommand("button_function 5 'accept_target_fixation'")

# Step 4: set up a graphics environment for calibration
#
# Open a window, be sure to specify monitor parameters
mon = monitors.Monitor('myMonitor', width=53.0, distance=70.0)
win = visual.Window(fullscr=full_screen,
                    monitor=mon,
                    winType='pyglet',
                    units='pix')

# get the native screen resolution used by PsychoPy
scn_width, scn_height = win.size
# resolution fix for Mac retina displays
if 'Darwin' in platform.system():
    if use_retina:
        scn_width = int(scn_width/2.0)
        scn_height = int(scn_height/2.0)

# Pass the display pixel coordinates (left, top, right, bottom) to the tracker
# see the EyeLink Installation Guide, "Customizing Screen Settings"
el_coords = "screen_pixel_coords = 0 0 %d %d" % (scn_width - 1, scn_height - 1)
el_tracker.sendCommand(el_coords)

# Write a DISPLAY_COORDS message to the EDF file
# Data Viewer needs this piece of info for proper visualization, see Data
# Viewer User Manual, "Protocol for EyeLink Data to Viewer Integration"
dv_coords = "DISPLAY_COORDS  0 0 %d %d" % (scn_width - 1, scn_height - 1)
el_tracker.sendMessage(dv_coords)

# Configure a graphics environment (genv) for tracker calibration
genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)
print(genv)  # print out the version number of the CoreGraphics library

# Set background and foreground colors for the calibration target
# in PsychoPy, (-1, -1, -1)=black, (1, 1, 1)=white, (0, 0, 0)=mid-gray
foreground_color = (-1, -1, -1)
background_color = win.color
genv.setCalibrationColors(foreground_color, background_color)

# Set up the calibration target
#
# The target could be a "circle" (default), a "picture", a "movie" clip,
# or a rotating "spiral". To configure the type of calibration target, set
# genv.setTargetType to "circle", "picture", "movie", or "spiral", e.g.,
# genv.setTargetType('picture')
#
# Use gen.setPictureTarget() to set a "picture" target
# genv.setPictureTarget(os.path.join('images', 'fixTarget.bmp'))
#
# Use genv.setMovieTarget() to set a "movie" target
# genv.setMovieTarget(os.path.join('videos', 'calibVid.mov'))

# Use a picture as the calibration target
genv.setTargetType('picture')
# Check if the target image exists before setting it
target_image_path = os.path.join('images', 'fixTarget.bmp')
if os.path.exists(target_image_path):
    genv.setPictureTarget(target_image_path)
else:
    print(f"Warning: Target image {target_image_path} not found. Using default circle target.")
    genv.setTargetType('circle')

# Configure the size of the calibration target (in pixels)
# this option applies only to "circle" and "spiral" targets
# genv.setTargetSize(24)

# Beeps to play during calibration, validation and drift correction
# parameters: target, good, error
#     target -- sound to play when target moves
#     good -- sound to play on successful operation
#     error -- sound to play on failure or interruption
# Each parameter could be ''--default sound, 'off'--no sound, or a wav file
genv.setCalibrationSounds('', '', '')

# resolution fix for macOS retina display issues
if use_retina:
    genv.fixMacRetinaDisplay()

# Request Pylink to use the PsychoPy window we opened above for calibration
pylink.openGraphicsEx(genv)

# === DUAL EYE TRACKING: Create gaze cursor for other participant ===
other_gaze_cursor = None
if gaze_network:
    other_gaze_cursor = visual.Circle(win, 
                                     radius=15, 
                                     fillColor='red', 
                                     lineColor='darkred',
                                     lineWidth=2,
                                     pos=(0, 0))

# === YOUR ORIGINAL HELPER FUNCTIONS (preserved exactly) ===

def clear_screen(win):
    """ clear up the PsychoPy window"""
    win.fillColor = genv.getBackgroundColor()
    win.flip()


def show_msg(win, text, wait_for_keypress=True):
    """ Show task instructions on screen"""
    msg = visual.TextStim(win, text,
                          color=genv.getForegroundColor(),
                          wrapWidth=scn_width/2)
    clear_screen(win)
    msg.draw()
    win.flip()

    # wait indefinitely, terminates upon any key press
    if wait_for_keypress:
        event.waitKeys()
        clear_screen(win)


def terminate_task():
    """ Terminate the task gracefully and retrieve the EDF data file

    file_to_retrieve: The EDF on the Host that we would like to download
    win: the current window used by the experimental script
    """

    el_tracker = pylink.getEYELINK()

    if el_tracker.isConnected():
        # Terminate the current trial first if the task terminated prematurely
        error = el_tracker.isRecording()
        if error == pylink.TRIAL_OK:
            abort_trial()

        # Put tracker in Offline mode
        el_tracker.setOfflineMode()

        # Clear the Host PC screen and wait for 500 ms
        el_tracker.sendCommand('clear_screen 0')
        pylink.msecDelay(500)

        # Close the edf data file on the Host
        el_tracker.closeDataFile()

        # Show a file transfer message on the screen
        msg = 'EDF data is transferring from EyeLink Host PC...'
        show_msg(win, msg, wait_for_keypress=False)

        # Download the EDF data file from the Host PC to a local data folder
        # parameters: source_file_on_the_host, destination_file_on_local_drive
        local_edf = os.path.join(session_folder, session_identifier + '.EDF')
        try:
            el_tracker.receiveDataFile(edf_file, local_edf)
        except RuntimeError as error:
            print('ERROR:', error)

        # Close the link to the tracker.
        el_tracker.close()

    # === DUAL EYE TRACKING: Disconnect from network ===
    if gaze_network:
        gaze_network.disconnect()

    # close the PsychoPy window
    win.close()

    # quit PsychoPy
    core.quit()
    sys.exit()


def abort_trial():
    """Ends recording """

    el_tracker = pylink.getEYELINK()

    # Stop recording
    if el_tracker.isRecording():
        # add 100 ms to catch final trial events
        pylink.pumpDelay(100)
        el_tracker.stopRecording()

    # clear the screen
    clear_screen(win)
    # Send a message to clear the Data Viewer screen
    bgcolor_RGB = (116, 116, 116)
    el_tracker.sendMessage('!V CLEAR %d %d %d' % bgcolor_RGB)

    # send a message to mark trial end
    el_tracker.sendMessage('TRIAL_RESULT %d' % pylink.TRIAL_ERROR)

    return pylink.TRIAL_ERROR


def run_trial(trial_pars, trial_index):
    """ Helper function specifying the events that will occur in a single trial
    === MODIFIED FOR DUAL EYE TRACKING ===

    trial_pars - a list containing trial parameters, e.g.,
                ['cond_1', 'img_1.jpg']
    trial_index - record the order of trial presentation in the task
    """

    # unpacking the trial parameters
    cond, pic = trial_pars

    # Check if image exists before loading
    image_path = os.path.join('images', pic)
    if not os.path.exists(image_path):
        print(f"ERROR: Image file {image_path} not found!")
        return pylink.TRIAL_ERROR

    # load the image to display, here we stretch the image to fill full screen
    img = visual.ImageStim(win,
                           image=image_path,
                           size=(scn_width, scn_height))

    # get a reference to the currently active EyeLink connection
    el_tracker = pylink.getEYELINK()

    # put the tracker in the offline mode first
    el_tracker.setOfflineMode()

    # clear the host screen before we draw the backdrop
    el_tracker.sendCommand('clear_screen 0')

    # === YOUR ORIGINAL BACKDROP CODE (with error handling) ===
    try:
        im = Image.open(image_path)  # read image with PIL
        im = im.resize((scn_width, scn_height))
        img_pixels = im.load()  # access the pixel data of the image
        pixels = [[img_pixels[i, j] for i in range(scn_width)]
                  for j in range(scn_height)]
        el_tracker.bitmapBackdrop(scn_width, scn_height, pixels,
                                  0, 0, scn_width, scn_height,
                                  0, 0, pylink.BX_MAXCONTRAST)
    except Exception as e:
        print(f"Error setting backdrop: {e}")

    # OPTIONAL: draw landmarks and texts on the Host screen
    left = int(scn_width/2.0) - 60
    top = int(scn_height/2.0) - 60
    right = int(scn_width/2.0) + 60
    bottom = int(scn_height/2.0) + 60
    draw_cmd = 'draw_filled_box %d %d %d %d 1' % (left, top, right, bottom)
    el_tracker.sendCommand(draw_cmd)

    # send a "TRIALID" message to mark the start of a trial
    el_tracker.sendMessage('TRIALID %d' % trial_index)

    # === DUAL EYE TRACKING: Add network status to trial message ===
    if gaze_network and gaze_network.connected:
        el_tracker.sendMessage('DUAL_TRACKING_ENABLED')
    else:
        el_tracker.sendMessage('DUAL_TRACKING_DISABLED')

    # record_status_message : show some info on the Host PC
    status_msg = f'TRIAL {trial_index} - Participant {participant_id}'
    if gaze_network and gaze_network.connected:
        status_msg += ' - DUAL TRACKING'
    el_tracker.sendCommand("record_status_message '%s'" % status_msg)

    # drift check (your original code preserved)
    while not dummy_mode:
        if (not el_tracker.isConnected()) or el_tracker.breakPressed():
            terminate_task()
            return pylink.ABORT_EXPT

        try:
            error = el_tracker.doDriftCorrect(int(scn_width/2.0),
                                              int(scn_height/2.0), 1, 1)
            if error is not pylink.ESC_KEY:
                break
        except:
            pass

    # put tracker in idle/offline mode before recording
    el_tracker.setOfflineMode()

    # Start recording
    try:
        el_tracker.startRecording(1, 1, 1, 1)
    except RuntimeError as error:
        print("ERROR:", error)
        abort_trial()
        return pylink.TRIAL_ERROR

    # Allocate some time for the tracker to cache some samples
    pylink.pumpDelay(100)

    # show the image, and log a message to mark the onset of the image
    clear_screen(win)
    img.draw()
    
    # === DUAL EYE TRACKING: Draw other participant's gaze cursor ===
    if gaze_network and gaze_network.connected and other_gaze_cursor:
        if gaze_network.other_gaze['valid']:
            # Convert gaze coordinates to screen coordinates
            cursor_x = gaze_network.other_gaze['x'] - scn_width/2
            cursor_y = scn_height/2 - gaze_network.other_gaze['y']
            other_gaze_cursor.pos = (cursor_x, cursor_y)
            other_gaze_cursor.draw()
    
    win.flip()
    el_tracker.sendMessage('image_onset')
    img_onset_time = core.getTime()

    # Send a message to clear the Data Viewer screen
    bgcolor_RGB = (116, 116, 116)
    el_tracker.sendMessage('!V CLEAR %d %d %d' % bgcolor_RGB)

    # send over a message to specify where the image is stored
    bg_image = '../../images/' + pic
    imgload_msg = '!V IMGLOAD CENTER %s %d %d %d %d' % (bg_image,
                                                        int(scn_width/2.0),
                                                        int(scn_height/2.0),
                                                        int(scn_width),
                                                        int(scn_height))
    el_tracker.sendMessage(imgload_msg)

    # send interest area messages to record in the EDF data file
    ia_pars = (1, left, top, right, bottom, 'screen_center')
    el_tracker.sendMessage('!V IAREA RECTANGLE %d %d %d %d %d %s' % ia_pars)

    # === MODIFIED TRIAL LOOP FOR DUAL EYE TRACKING ===
    event.clearEvents()
    RT = -1
    get_keypress = False
    
    # Add frame counter to reduce network/display update frequency
    frame_count = 0
    
    while not get_keypress:
        frame_count += 1
        
        # === DUAL EYE TRACKING: Send current gaze data (less frequently) ===
        if gaze_network and gaze_network.connected and not dummy_mode and frame_count % 3 == 0:
            try:
                sample = el_tracker.getNewestSample()
                if sample:
                    gaze_pos = None
                    if sample.isRightSample():
                        gaze_pos = sample.getRightEye().getGaze()
                    elif sample.isLeftSample():
                        gaze_pos = sample.getLeftEye().getGaze()
                    
                    if gaze_pos and gaze_pos != (pylink.MISSING_DATA, pylink.MISSING_DATA):
                        gaze_network.send_gaze_data(gaze_pos[0], gaze_pos[1], True)
                    else:
                        gaze_network.send_gaze_data(0, 0, False)
            except Exception as e:
                print(f"Error getting gaze sample: {e}")

        # === DUAL EYE TRACKING: Update display with other's gaze (less frequently) ===
        if gaze_network and gaze_network.connected and other_gaze_cursor and frame_count % 5 == 0:
            clear_screen(win)
            img.draw()
            
            # Draw other participant's gaze cursor if valid
            if gaze_network.other_gaze['valid']:
                try:
                    cursor_x = gaze_network.other_gaze['x'] - scn_width/2
                    cursor_y = scn_height/2 - gaze_network.other_gaze['y']
                    # Clamp cursor position to screen bounds
                    cursor_x = max(-scn_width/2, min(scn_width/2, cursor_x))
                    cursor_y = max(-scn_height/2, min(scn_height/2, cursor_y))
                    other_gaze_cursor.pos = (cursor_x, cursor_y)
                    other_gaze_cursor.draw()
                except Exception as e:
                    print(f"Error drawing gaze cursor: {e}")
                    
            win.flip()

        # present the picture for a maximum of 5 seconds (your original logic)
        if core.getTime() - img_onset_time >= 5.0:
            el_tracker.sendMessage('time_out')
            break

        # abort the current trial if the tracker is no longer recording
        error = el_tracker.isRecording()
        if error is not pylink.TRIAL_OK:
            el_tracker.sendMessage('tracker_disconnected')
            abort_trial()
            return error

        # check keyboard events (your original code)
        for keycode, modifier in event.getKeys(modifiers=True):
            if keycode == 'space':
                el_tracker.sendMessage('key_pressed')
                RT = int((core.getTime() - img_onset_time)*1000)
                get_keypress = True

            if keycode == 'escape':
                el_tracker.sendMessage('trial_skipped_by_user')
                clear_screen(win)
                abort_trial()
                return pylink.SKIP_TRIAL

            if keycode == 'c' and (modifier['ctrl'] is True):
                el_tracker.sendMessage('terminated_by_user')
                terminate_task()
                return pylink.ABORT_EXPT

    # clear the screen
    clear_screen(win)
    el_tracker.sendMessage('blank_screen')
    el_tracker.sendMessage('!V CLEAR 128 128 128')
