# Dual Computer Eye Tracking with Cross-Gaze Display
# Computer A sees Person B's gaze, Computer B sees Person A's gaze

from __future__ import division
from __future__ import print_function

import pylink
import os
import platform
import random
import time
import sys
import socket
import threading
import json
from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy
from psychopy import visual, core, event, monitors, gui
from PIL import Image
from string import ascii_letters, digits

# Network Configuration
NETWORK_PORT = 12345
BUFFER_SIZE = 1024

class NetworkGazeSharer:
    def __init__(self, is_server=True, partner_ip="127.0.0.1"):
        self.is_server = is_server
        self.partner_ip = partner_ip
        self.socket = None
        self.connected = False
        self.partner_gaze_data = {"x": 0, "y": 0, "timestamp": 0}
        self.lock = threading.Lock()
        self.running = True
        
    def start_connection(self):
        """Start network connection as server or client"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            
            if self.is_server:
                print("Starting as server...")
                self.socket.bind(('', NETWORK_PORT))
                self.socket.listen(1)
                print(f"Listening on port {NETWORK_PORT}")
                conn, addr = self.socket.accept()
                print(f"Connected to {addr}")
                self.socket = conn
            else:
                print(f"Connecting to {self.partner_ip}:{NETWORK_PORT}")
                self.socket.connect((self.partner_ip, NETWORK_PORT))
                print("Connected to server")
            
            self.connected = True
            # Start receiver thread
            receiver_thread = threading.Thread(target=self._receive_gaze_data)
            receiver_thread.daemon = True
            receiver_thread.start()
            
        except Exception as e:
            print(f"Network connection error: {e}")
            self.connected = False
    
    def _receive_gaze_data(self):
        """Continuously receive partner's gaze data"""
        while self.running and self.connected:
            try:
                data = self.socket.recv(BUFFER_SIZE).decode('utf-8')
                if data:
                    gaze_info = json.loads(data)
                    with self.lock:
                        self.partner_gaze_data = gaze_info
            except Exception as e:
                print(f"Error receiving data: {e}")
                self.connected = False
                break
    
    def send_gaze_data(self, x, y):
        """Send own gaze data to partner"""
        if self.connected:
            try:
                gaze_info = {
                    "x": x,
                    "y": y,
                    "timestamp": time.time()
                }
                message = json.dumps(gaze_info) + '\n'
                self.socket.send(message.encode('utf-8'))
            except Exception as e:
                print(f"Error sending data: {e}")
                self.connected = False
    
    def get_partner_gaze(self):
        """Get partner's latest gaze data"""
        with self.lock:
            return self.partner_gaze_data.copy()
    
    def close(self):
        """Close network connection"""
        self.running = False
        if self.socket:
            try:
                self.socket.close()
            except:
                pass

# Configuration Dialog
def get_network_config():
    """Get network configuration from user"""
    dlg = gui.Dlg(title="Network Configuration")
    dlg.addField('Computer Role:', choices=["Server (A)", "Client (B)"])
    dlg.addField('Partner IP (if client):', '192.168.1.100')
    dlg.addField('EDF File Name:', 'TEST')
    
    config = dlg.show()
    if not dlg.OK:
        core.quit()
        sys.exit()
    
    is_server = config[0] == "Server (A)"
    partner_ip = config[1] if not is_server else "127.0.0.1"
    edf_fname = config[2]
    
    return is_server, partner_ip, edf_fname

# Get configuration
is_server, partner_ip, edf_fname = get_network_config()

# Initialize network connection
network_sharer = NetworkGazeSharer(is_server=is_server, partner_ip=partner_ip)
network_sharer.start_connection()

if not network_sharer.connected:
    print("Failed to establish network connection!")
    core.quit()
    sys.exit()

# Switch to the script folder
script_path = os.path.dirname(sys.argv[0])
if len(script_path) != 0:
    os.chdir(script_path)

# Show only critical log message in the PsychoPy console
from psychopy import logging
logging.console.setLevel(logging.CRITICAL)

# Configuration variables
use_retina = False
dummy_mode = False  # Set to True for testing without eye tracker
full_screen = True

# Validate EDF filename
allowed_char = ascii_letters + digits + '_'
if not all([c in allowed_char for c in edf_fname]):
    print('ERROR: Invalid EDF filename')
    sys.exit()
elif len(edf_fname) > 8:
    print('ERROR: EDF filename should not exceed 8 characters')
    sys.exit()

# Set up folders
results_folder = 'results'
if not os.path.exists(results_folder):
    os.makedirs(results_folder)

time_str = time.strftime("_%Y_%m_%d_%H_%M", time.localtime())
session_identifier = edf_fname + time_str
session_folder = os.path.join(results_folder, session_identifier)
if not os.path.exists(session_folder):
    os.makedirs(session_folder)

# Step 1: Connect to EyeLink
if dummy_mode:
    el_tracker = pylink.EyeLink(None)
else:
    try:
        el_tracker = pylink.EyeLink("100.1.1.1")
    except RuntimeError as error:
        print('ERROR:', error)
        network_sharer.close()
        core.quit()
        sys.exit()

# Step 2: Open EDF file
edf_file = edf_fname + ".EDF"
try:
    el_tracker.openDataFile(edf_file)
except RuntimeError as err:
    print('ERROR:', err)
    if el_tracker.isConnected():
        el_tracker.close()
    network_sharer.close()
    core.quit()
    sys.exit()

# Add header
preamble_text = 'RECORDED BY %s' % os.path.basename(__file__)
el_tracker.sendCommand("add_file_preamble_text '%s'" % preamble_text)

# Step 3: Configure tracker
el_tracker.setOfflineMode()

# Get tracker version
eyelink_ver = 0
if not dummy_mode:
    vstr = el_tracker.getTrackerVersionString()
    eyelink_ver = int(vstr.split()[-1].split('.')[0])
    print('Running experiment on %s, version %d' % (vstr, eyelink_ver))

# Configure data collection
file_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'
link_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,FIXUPDATE,INPUT'

if eyelink_ver > 3:
    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,HTARGET,GAZERES,BUTTON,STATUS,INPUT'
    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT'
else:
    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,GAZERES,BUTTON,STATUS,INPUT'
    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT'

el_tracker.sendCommand("file_event_filter = %s" % file_event_flags)
el_tracker.sendCommand("file_sample_data = %s" % file_sample_flags)
el_tracker.sendCommand("link_event_filter = %s" % link_event_flags)
el_tracker.sendCommand("link_sample_data = %s" % link_sample_flags)

# Calibration settings
el_tracker.sendCommand("calibration_type = HV9")
el_tracker.sendCommand("button_function 5 'accept_target_fixation'")

# Step 4: Graphics setup
mon = monitors.Monitor('myMonitor', width=53.0, distance=70.0)
win = visual.Window(fullscr=full_screen,
                    monitor=mon,
                    winType='pyglet',
                    units='pix')

scn_width, scn_height = win.size
if 'Darwin' in platform.system() and use_retina:
    scn_width = int(scn_width/2.0)
    scn_height = int(scn_height/2.0)

# Configure tracker coordinates
el_coords = "screen_pixel_coords = 0 0 %d %d" % (scn_width - 1, scn_height - 1)
el_tracker.sendCommand(el_coords)

dv_coords = "DISPLAY_COORDS  0 0 %d %d" % (scn_width - 1, scn_height - 1)
el_tracker.sendMessage(dv_coords)

# Configure graphics environment
genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)
foreground_color = (-1, -1, -1)
background_color = win.color
genv.setCalibrationColors(foreground_color, background_color)

# Set calibration target
genv.setTargetType('circle')
genv.setCalibrationSounds('', '', '')

if use_retina:
    genv.fixMacRetinaDisplay()

pylink.openGraphicsEx(genv)

# Helper functions
def clear_screen(win):
    win.fillColor = genv.getBackgroundColor()
    win.flip()

def show_msg(win, text, wait_for_keypress=True):
    msg = visual.TextStim(win, text,
                          color=genv.getForegroundColor(),
                          wrapWidth=scn_width/2)
    clear_screen(win)
    msg.draw()
    win.flip()
    
    if wait_for_keypress:
        event.waitKeys()
        clear_screen(win)

def terminate_task():
    """Terminate task and clean up"""
    el_tracker = pylink.getEYELINK()
    
    if el_tracker.isConnected():
        error = el_tracker.isRecording()
        if error == pylink.TRIAL_OK:
            el_tracker.stopRecording()
        
        el_tracker.setOfflineMode()
        el_tracker.sendCommand('clear_screen 0')
        pylink.msecDelay(500)
        el_tracker.closeDataFile()
        
        # Download EDF file
        msg = 'EDF data is transferring...'
        show_msg(win, msg, wait_for_keypress=False)
        
        local_edf = os.path.join(session_folder, session_identifier + '.EDF')
        try:
            el_tracker.receiveDataFile(edf_file, local_edf)
        except RuntimeError as error:
            print('ERROR:', error)
        
        el_tracker.close()
    
    # Close network connection
    network_sharer.close()
    win.close()
    core.quit()
    sys.exit()

def get_current_gaze():
    """Get current gaze position from eye tracker"""
    if dummy_mode:
        # Return dummy data for testing
        return random.randint(0, scn_width), random.randint(0, scn_height)
    
    try:
        # Get the newest sample from the tracker
        sample = el_tracker.getNewestSample()
        if sample is not None:
            if sample.isRightSample():
                gaze_x, gaze_y = sample.getRightEye().getGaze()
            elif sample.isLeftSample():
                gaze_x, gaze_y = sample.getLeftEye().getGaze()
            else:
                return None, None
            
            # Convert to screen coordinates if needed
            if gaze_x != pylink.MISSING_DATA and gaze_y != pylink.MISSING_DATA:
                return int(gaze_x), int(gaze_y)
    except:
        pass
    
    return None, None

def run_cross_gaze_experiment():
    """Main experiment showing partner's gaze data"""
    
    # Create gaze cursor for partner's gaze
    partner_cursor = visual.Circle(win, 
                                 radius=10, 
                                 fillColor='red', 
                                 lineColor='darkred',
                                 lineWidth=2)
    
    # Create text to show whose gaze is being displayed
    role_text = "Server" if is_server else "Client"
    partner_role = "Client" if is_server else "Server"
    
    info_text = visual.TextStim(win, 
                               text=f"You are: {role_text}\nShowing: {partner_role}'s gaze",
                               pos=(0, scn_height//2 - 50),
                               color='white',
                               height=20)
    
    # Start recording
    el_tracker.startRecording(1, 1, 1, 1)
    el_tracker.sendMessage('CROSS_GAZE_EXPERIMENT_START')
    
    start_time = core.getTime()
    last_gaze_send = 0
    
    print(f"Starting cross-gaze experiment. {role_text} showing {partner_role}'s gaze.")
    
    while True:
        current_time = core.getTime()
        
        # Send own gaze data every 16ms (60Hz)
        if current_time - last_gaze_send > 0.016:
            own_gaze_x, own_gaze_y = get_current_gaze()
            if own_gaze_x is not None and own_gaze_y is not None:
                network_sharer.send_gaze_data(own_gaze_x, own_gaze_y)
                last_gaze_send = current_time
        
        # Get partner's gaze data
        partner_gaze = network_sharer.get_partner_gaze()
        
        # Clear screen
        win.color = 'gray'
        win.flip()
        
        # Draw partner's gaze cursor
        if partner_gaze['timestamp'] > 0:  # Check if we have valid data
            # Convert partner's coordinates to our screen coordinates
            partner_x = partner_gaze['x'] - scn_width//2  # Convert to PsychoPy coordinates
            partner_y = scn_height//2 - partner_gaze['y']  # Convert and flip Y
            
            partner_cursor.pos = (partner_x, partner_y)
            partner_cursor.draw()
        
        # Draw info text
        info_text.draw()
        
        # Draw connection status
        status_color = 'green' if network_sharer.connected else 'red'
        status_text = "Connected" if network_sharer.connected else "Disconnected"
        connection_info = visual.TextStim(win, 
                                        text=f"Network: {status_text}",
                                        pos=(0, -scn_height//2 + 30),
                                        color=status_color,
                                        height=16)
        connection_info.draw()
        
        win.flip()
        
        # Check for exit
        keys = event.getKeys()
        if 'escape' in keys:
            break
        
        # Auto-exit after 30 seconds for demo
        if current_time - start_time > 30:
            break
    
    # Stop recording
    el_tracker.stopRecording()
    el_tracker.sendMessage('CROSS_GAZE_EXPERIMENT_END')

# Step 5: Calibration
computer_role = "Computer A (Server)" if is_server else "Computer B (Client)"
task_msg = f'Welcome to Cross-Gaze Experiment!\n\n' + \
           f'You are running: {computer_role}\n' + \
           f'Partner gaze will be shown as a RED cursor\n\n' + \
           f'Press ESCAPE to quit during experiment\n\n'

if dummy_mode:
    task_msg += 'Running in DUMMY MODE - Press ENTER to start'
else:
    task_msg += 'Press ENTER twice to calibrate eye tracker'

show_msg(win, task_msg)

# Calibration (skip in dummy mode)
if not dummy_mode:
    try:
        el_tracker.doTrackerSetup()
    except RuntimeError as err:
        print('ERROR:', err)
        el_tracker.exitCalibration()

# Wait for both computers to be ready
ready_msg = f'{computer_role} is ready!\n\nWaiting for partner...\n\nPress SPACE when both computers are ready to start.'
show_msg(win, ready_msg)

# Step 6: Run the cross-gaze experiment
try:
    run_cross_gaze_experiment()
except Exception as e:
    print(f"Experiment error: {e}")
finally:
    terminate_task()
